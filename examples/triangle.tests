// Adapted from
// Introduction to Software Testing
// Authors: Paul Ammann & Jeff Offutt
// Chapter 6; page ??
// JUnit for TriangleType.java

#include "triangle.h"

#BEGINTEST
void triangle_test_0() {
  int s1 = 0;
  int s2 = 1;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_1() {
  int s1 = 1;
  int s2 = 0;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_2() {
  int s1 = 1;
  int s2 = 0;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_3() {
  int s1 = 1;
  int s2 = 2;
  int s3 = 3;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_4() {
  int s1 = 1;
  int s2 = 3;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_5() {
  int s1 = 3;
  int s2 = 1;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_6() {
  int s1 = 2;
  int s2 = 2;
  int s3 = 4;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_7() {
  int s1 = 2;
  int s2 = 4;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_8() {
  int s1 = 4;
  int s2 = 2;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = INVALID;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_9() {
  int s1 = 2;
  int s2 = 2;
  int s3 = 3;

  int real = triangle(s1, s2, s3);
  int expected = ISOSCELES;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_10() {
  int s1 = 3;
  int s2 = 2;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = ISOSCELES;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_11() {
  int s1 = 2;
  int s2 = 3;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = ISOSCELES;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_12() {
  int s1 = 2;
  int s2 = 2;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = EQUILATERAL;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_13() {
  int s1 = 2;
  int s2 = 3;
  int s3 = 4;

  int real = triangle(s1, s2, s3);
  int expected = SCALENE;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_14() {
  int s1 = 4;
  int s2 = 3;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = SCALENE;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_15() {
  int s1 = 3;
  int s2 = 4;
  int s3 = 2;

  int real = triangle(s1, s2, s3);
  int expected = SCALENE;

  #ASSERT real == expected
}
#ENDTEST

#BEGINTEST
void triangle_test_equilateral() {
  int s1 = _;
  int s2 = _;
  int s3 = _;

  #ASSUME s1 == s2
  #ASSUME s2 == s3
  #ASSUME s1 > 0

  int real = triangle(s1, s2, s3);
  int expected = EQUILATERAL;

  #ASSERT real == expected
}
#ENDTEST