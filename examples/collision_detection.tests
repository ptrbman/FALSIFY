#include "collision_detection.h"
#include <stdlib.h>

#BEGINTEST
void cd_test_1() {
  int x1 = _;
  int y1 = _;
  int w1 = _;
  int h1 = _;

  int x2 = _;
  int y2 = _;
  int w2 = _;
  int h2 = _;

  #ASSUME w1 > 0 && h1 > 0 && w2 > 0 && h2 > 0
  #ASSUME x1 + w1 < x2

  int real = is_collision(x1, y1, w1, h1, x2, y2, w2, h2);
  int expected = 0;

  #ASSERT real == expected
}
#ENDTEST





/* function detectCollision(rect1, rect2): */
/*   // Calculate the positions of the corners of each rectangle */
/*   rect1_corners = [(rect1.x, rect1.y), (rect1.x + rect1.width, rect1.y), (rect1.x, rect1.y + rect1.height), (rect1.x + rect1.width, rect1.y + rect1.height)] */
/*   rect2_corners = [(rect2.x, rect2.y), (rect2.x + rect2.width, rect2.y), (rect2.x, rect2.y + rect2.height), (rect2.x + rect2.width, rect2.y + rect2.height)] */
  
/*   // Check if any corner of one rectangle is inside the other rectangle */
/*   for corner in rect1_corners: */
/*     if corner[0] >= rect2.x and corner[0] <= rect2.x + rect2.width and corner[1] >= rect2.y and corner[1] <= rect2.y + rect2.height: */
/*       return True */
      
/*   for corner in rect2_corners: */
/*     if corner[0] >= rect1.x and corner[0] <= rect1.x + rect1.width and corner[1] >= rect1.y and corner[1] <= rect1.y + rect1.height: */
/*       return True */
      
/*   // Check if any edge of one rectangle overlaps with the edges of the other rectangle */
/*   if rect1.x + rect1.width >= rect2.x and rect1.x <= rect2.x + rect2.width and rect1.y + rect1.height >= rect2.y and rect1.y <= rect2.y + rect2.height: */
/*     return True */
    
/*   if rect2.x + rect2.width >= rect1.x and rect2.x <= rect1.x + rect1.width and rect2.y + rect2.height >= rect1.y and rect2.y <= rect1.y + rect1.height: */
/*     return True */
    
/*   // If no collision is detected, return False */
/*   return False */
